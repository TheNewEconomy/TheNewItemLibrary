/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // Support convention plugins written in Kotlin. Convention plugins are build scripts in 'src/main' that automatically become available as plugins in the main build.
    `java-library`
    `maven-publish`
    id("java")
    id("com.gradleup.shadow") version "9.0.0-beta16" apply true
}

val adventureVersion = property("adventure_version")!!

subprojects {

    apply(plugin = "java-library")
    apply(plugin = "java")
    apply(plugin = "com.gradleup.shadow")
    apply(plugin = "maven-publish")

    //our properties
    version = property("tnil_version")!!


    repositories {
        mavenCentral()
        maven("https://maven.fabricmc.net")
        maven("https://s01.oss.sonatype.org/content/repositories/snapshots/")
        maven("https://oss.sonatype.org/content/repositories/snapshots/")
        maven("https://jitpack.io")
        maven("https://plugins.gradle.org/m2/")
        maven("https://repo.codemc.io/repository/maven-public/")
        maven("https://maven.devs.beer/")
        maven("https://repo.nexomc.com/releases")
        maven("https://repo.oraxen.com/releases")
        maven("https://repo.xenondevs.xyz/releases")
        maven("https://nexus.phoenixdevt.fr/repository/maven-public/")
        maven("https://repo.auxilor.io/repository/maven-public/")
        maven("https://mvn.lumine.io/repository/maven-public/")
    }

    dependencies {

        compileOnly("net.kyori:adventure-api:$adventureVersion")
        compileOnly("net.kyori:adventure-text-serializer-json:$adventureVersion")
        compileOnly("net.kyori:adventure-text-serializer-legacy:$adventureVersion")
        compileOnly("net.kyori:adventure-text-serializer-plain:$adventureVersion")

        api("com.googlecode.json-simple:json-simple:1.1.1") {
            exclude("junit", "junit")
        }
        api("com.vdurmont:semver4j:3.1.0")
    }

    java {

        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks {
        compileJava {
            options.encoding = "UTF-8"

            sourceCompatibility = "17"
            targetCompatibility = "17"
        }

        jar {
            from("../license.md")
        }

        shadowJar {
        }

        processResources {
            filesMatching("**/resources/*") {
                expand(rootProject.project.properties)
            }

            outputs.upToDateWhen { false }
        }
    }

    publishing {
        publications {
            create<MavenPublication>("shadow") {
                from(components["shadow"])
                groupId = property("tnil_group")!! as String?
                version = property("tnil_version")!! as String?
            }
        }

        repositories {
            val mavenUrl: String? by project
            val mavenSnapshotUrl: String? by project

            (if(version.toString().endsWith("SNAPSHOT")) mavenSnapshotUrl else mavenUrl)?.let { url ->
                maven(url) {
                    val mavenUsername: String? by project
                    val mavenPassword: String? by project
                    if(mavenUsername != null && mavenPassword != null) {
                        credentials {
                            username = mavenUsername
                            password = mavenPassword
                        }
                    }
                }
            }
        }
    }
}